[{"path":"https://dnietolugilde.com/dsclim/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://dnietolugilde.com/dsclim/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://dnietolugilde.com/dsclim/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://dnietolugilde.com/dsclim/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://dnietolugilde.com/dsclim/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://dnietolugilde.com/dsclim/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://dnietolugilde.com/dsclim/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://dnietolugilde.com/dsclim/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://dnietolugilde.com/dsclim/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://dnietolugilde.com/dsclim/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://dnietolugilde.com/dsclim/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://dnietolugilde.com/dsclim/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://dnietolugilde.com/dsclim/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://dnietolugilde.com/dsclim/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://dnietolugilde.com/dsclim/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://dnietolugilde.com/dsclim/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://dnietolugilde.com/dsclim/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://dnietolugilde.com/dsclim/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://dnietolugilde.com/dsclim/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://dnietolugilde.com/dsclim/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://dnietolugilde.com/dsclim/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":[]},{"path":"https://dnietolugilde.com/dsclim/articles/a1_Data_downloading_and_preprocessing.html","id":"data-download","dir":"Articles","previous_headings":"TraCE21ka paleoclimate data","what":"Data download","title":"1. Data downloading and preprocessing","text":"TraCE21ka paleoclimate data can downloaded https://www.earthsystemgrid.org/project/trace.html. website, however, provide documentation detailed information (e.g., meaning file names, variable names, units, etcetera). can find information following link (http://www.cgd.ucar.edu/ccr/TraCE/fields.html). Complementary information can found documentation website model developing laboratory: http://www.cesm.ucar.edu/projects/community-projects/LENS/data-sets.html http://www.cesm.ucar.edu/models/atm-cam/docs/cam2.0/UsersGuide/UG-45.html. opted download files time periods (since 22.000 years BP 1990 CE) ‘surface temperature (radiative)’ (TS), ‘maximum surface temperature output period’ (TSMX), ‘minimum surface temperature output period’ (TSMN), ‘surface pressure’ (PS), ‘convective precipitation rate (liq + ice)’ (PRECC), ‘relative humidity’ (RELHUM), ‘wind speed (horizontal vertical components)’ (U + V) ‘vertically-integrated total cloud’ (CLDTOT).","code":""},{"path":"https://dnietolugilde.com/dsclim/articles/a1_Data_downloading_and_preprocessing.html","id":"inspect-files-and-variables","dir":"Articles","previous_headings":"TraCE21ka paleoclimate data","what":"Inspect files and variables","title":"1. Data downloading and preprocessing","text":"Downloaded files can inspected functions loadeR package, using following code (select variable): TSMX TSMN TS PRECC RELHUM CLDTOT PS U V file relative humidity TraCE21ka information different atmospheric levels. case, first selected surface preasure level create new file information simplify subsequent computations. , surface pressure level selected new file inspected.","code":"di.trace <- loadeR::dataInventory(\"Data/TraCE21ka/TSMX/trace.36.400BP-1990CE.cam2.h0.TSMX.2160101-2204012.nc\") str(di.trace) di.trace <- loadeR::dataInventory(\"Data/TraCE21ka/TSMN/trace.36.400BP-1990CE.cam2.h0.TSMN.2160101-2204012.nc\") str(di.trace) di.trace <- loadeR::dataInventory(\"Data/TraCE21ka/TS/trace.36.400BP-1990CE.cam2.h0.TS.2160101-2204012.nc\") str(di.trace) di.trace <- loadeR::dataInventory(\"Data/TraCE21ka/PRECC/trace.36.400BP-1990CE.cam2.h0.PRECC.2160101-2204012.nc\") str(di.trace) # BASH script  cdo sellevel,992.5561 Data/TraCE21ka/RELHUM/trace.36.400BP-1990CE.cam2.h0.RELHUM.2160101-2204012.nc Data/TraCE21ka/RELHUM/surface_level/trace.36.400BP-1990CE.cam2.h0.RELHUM.2160101-2204012.nc di.trace <- loadeR::dataInventory(\"Data/TraCE21ka/RELHUM/surface_level/trace.36.400BP-1990CE.cam2.h0.RELHUM.2160101-2204012.nc\") str(di.trace) di.trace <- loadeR::dataInventory(\"Data/TraCE21ka/CLDTOT/trace.36.400BP-1990CE.cam2.h0.CLDTOT.2160101-2204012.nc\") str(di.trace) di.trace <- loadeR::dataInventory(\"Data/TraCE21ka/PS/trace.36.400BP-1990CE.cam2.h0.PS.2160101-2204012.nc\") str(di.trace) di.trace <- loadeR::dataInventory(\"Data/TraCE21ka/U/trace.36.400BP-1990CE.cam2.h0.U.2160101-2204012.nc\") str(di.trace) di.trace <- loadeR::dataInventory(\"Data/TraCE21ka/V/trace.36.400BP-1990CE.cam2.h0.V.2160101-2204012.nc\") str(di.trace)"},{"path":"https://dnietolugilde.com/dsclim/articles/a1_Data_downloading_and_preprocessing.html","id":"create-dictionary","dir":"Articles","previous_headings":"TraCE21ka paleoclimate data","what":"Create dictionary","title":"1. Data downloading and preprocessing","text":"order load files R, climate4R framework allow create dictionary used standardize variables.","code":"file.create(\"Data/TraCE21ka/TraCE21ka_dictionary.dic\") writeLines(   c(     \"identifier,short_name,time_step,lower_time_bound,upper_time_bound,cell_method,offset,scale,deaccum,derived,interface\",     \"tasmax,TSMX,1mo,0,12,max,-273.15,1,0,0,\",     \"tasmin,TSMN,1mo,0,12,min,-273.15,1,0,0,\",     \"tas,TS,1mo,0,12,mean,-273.15,1,0,0,\",     \"pr,PRECC,1mo,0,12,mean,0,2592000000,0,0,\",     \"hurs,RELHUM,1mo,0,12,mean,0,1,0,0,\",     \"cld,CLDTOT,1mo,0,12,mean,0,1,0,0,\",     \"ps,PS,1mo,0,12,mean,0,1,0,0,\",     \"u,U,1mo,0,12,mean,0,1,0,0,\",     \"v,V,1mo,0,12,mean,0,1,0,0,\"   ),   \"Data/TraCE21ka/TraCE21ka_dictionary.dic\" )"},{"path":"https://dnietolugilde.com/dsclim/articles/a1_Data_downloading_and_preprocessing.html","id":"uerra-historical-reanalysis-data","dir":"Articles","previous_headings":"","what":"UERRA historical reanalysis data","title":"1. Data downloading and preprocessing","text":"Reanalysis data historical period (1961-1990) comes UERRA project (https://www.uerra.eu/). data can downloaded Climate Data Store Copernicus website (https://cds.climate.copernicus.eu/cdsapp#!/dataset/reanalysis-uerra-europe-single-levels?tab=overview). Technical details can found Climate Data Store links provided website European Centre Medium-Range Weather Forecasts (ECMWF) UERRA project (https://www.ecmwf.int/en/research/projects/uerra). project provide reanalysis two different systems (UERRA-HARMONIE MESCAN-SURFEX) produce data Lambert Conformal Conic Grid 6 hours temporal resolution two spatial resolutions: 11km x 11km UERRA-HARMONIE system 5.5km x 5.5km MESCAN-SURFEX system. reanalysis data predictand variables, downloaded temperature, precipitation, relative humidity, cloud cover, surface pressure, wind speed data using following python scripts.","code":""},{"path":"https://dnietolugilde.com/dsclim/articles/a1_Data_downloading_and_preprocessing.html","id":"downloading-files-from-dataserver","dir":"Articles","previous_headings":"UERRA historical reanalysis data","what":"Downloading files from dataserver","title":"1. Data downloading and preprocessing","text":"interested downscaling spatial resolution UERRA-HARMONIE, precipitation data downloaded MESCAN-SURFEX system. main reason UERRA-HARMONIE doesn’t provide precipitation data. MESCAN-SURFEX system produce data finer spatial resolution afterwards aggregated (upscaled) desired resolution. Temperature Precipitation Relative humidity Wind speed Total cloud cover Surface pressure","code":"# Python script  import cdsapi  c = cdsapi.Client()  for y in range(1961, 1990):   print(y)      c.retrieve(     'reanalysis-uerra-europe-single-levels',     {       'format': 'grib',       'origin': 'uerra_harmonie',       'variable': '2m_temperature',       'year': [         str(y),         ],       'month': [         '01', '02', '03',         '04', '05', '06',         '07', '08', '09',         '10', '11', '12',         ],       'day': [         '01', '02', '03',         '04', '05', '06',         '07', '08', '09',         '10', '11', '12',         '13', '14', '15',         '16', '17', '18',         '19', '20', '21',         '22', '23', '24',         '25', '26', '27',         '28', '29', '30',         '31',         ],       'time': [         '00:00', '06:00', '12:00',         '18:00',         ],     },     'UERRA-HARMONIE/2m_temperature/'+ str(y) +'_2m_temperature.grib') # Python script  import cdsapi  c = cdsapi.Client()  for y in range(1961, 1990):   print(y)      c.retrieve(     'reanalysis-uerra-europe-single-levels',     {       'format': 'grib',       'origin': 'mescan_surfex',       'variable': 'total_precipitation',       'year': [         str(y),         ],       'month': [         '01', '02', '03',         '04', '05', '06',         '07', '08', '09',         '10', '11', '12',         ],       'day': [         '01', '02', '03',         '04', '05', '06',         '07', '08', '09',         '10', '11', '12',         '13', '14', '15',         '16', '17', '18',         '19', '20', '21',         '22', '23', '24',         '25', '26', '27',         '28', '29', '30',         '31',         ],       'time': [         '00:00', '06:00', '12:00',         '18:00',         ],     },     'MESCAN-SURFEX/total_precipitation/'+ str(y) +'_total_precipitation.grib') # Python script  import cdsapi  c = cdsapi.Client()  for y in range(1961, 1990):   print(y)      c.retrieve(     'reanalysis-uerra-europe-single-levels',     {       'format': 'grib',       'origin': 'uerra_harmonie',       'variable': '2m_relative_humidity',       'year': [         str(y),         ],       'month': [         '01', '02', '03',         '04', '05', '06',         '07', '08', '09',         '10', '11', '12',         ],       'day': [         '01', '02', '03',         '04', '05', '06',         '07', '08', '09',         '10', '11', '12',         '13', '14', '15',         '16', '17', '18',         '19', '20', '21',         '22', '23', '24',         '25', '26', '27',         '28', '29', '30',         '31',         ],       'time': [         '00:00', '06:00', '12:00',         '18:00',         ],     },     'UERRA-HARMONIE/2m_relative_humidity/'+ str(y) +'_2m_relative_humidity.grib') # Python script  import cdsapi  c = cdsapi.Client()  for y in range(1961, 1990):   print(y)      c.retrieve(     'reanalysis-uerra-europe-single-levels',     {       'format': 'grib',       'origin': 'uerra_harmonie',       'variable': '10m_wind_speed',       'year': [         str(y),         ],       'month': [         '01', '02', '03',         '04', '05', '06',         '07', '08', '09',         '10', '11', '12',         ],       'day': [         '01', '02', '03',         '04', '05', '06',         '07', '08', '09',         '10', '11', '12',         '13', '14', '15',         '16', '17', '18',         '19', '20', '21',         '22', '23', '24',         '25', '26', '27',         '28', '29', '30',         '31',         ],       'time': [         '00:00', '06:00', '12:00',         '18:00',         ],     },     'UERRA-HARMONIE/10m_wind_speed/'+ str(y) +'_10m_wind_speed.grib') # Python script  import cdsapi  c = cdsapi.Client()  for y in range(1961, 1990):   print(y)      c.retrieve(     'reanalysis-uerra-europe-single-levels',     {       'format': 'grib',       'origin': 'uerra_harmonie',       'variable': 'total_cloud_cover',       'year': [         str(y),         ],       'month': [         '01', '02', '03',         '04', '05', '06',         '07', '08', '09',         '10', '11', '12',         ],       'day': [         '01', '02', '03',         '04', '05', '06',         '07', '08', '09',         '10', '11', '12',         '13', '14', '15',         '16', '17', '18',         '19', '20', '21',         '22', '23', '24',         '25', '26', '27',         '28', '29', '30',         '31',         ],       'time': [         '00:00', '06:00', '12:00',         '18:00',         ],     },     'UERRA-HARMONIE/total_cloud_cover/'+ str(y) +'_total_cloud_cover.grib') # Python script  import cdsapi  c = cdsapi.Client()  for y in range(1961, 1990):   print(y)      c.retrieve(     'reanalysis-uerra-europe-single-levels',     {       'format': 'grib',       'origin': 'uerra_harmonie',       'variable': 'surface_pressure',       'year': [         str(y),         ],       'month': [         '01', '02', '03',         '04', '05', '06',         '07', '08', '09',         '10', '11', '12',         ],       'day': [         '01', '02', '03',         '04', '05', '06',         '07', '08', '09',         '10', '11', '12',         '13', '14', '15',         '16', '17', '18',         '19', '20', '21',         '22', '23', '24',         '25', '26', '27',         '28', '29', '30',         '31',         ],       'time': [         '00:00', '06:00', '12:00',         '18:00',         ],     },     'UERRA-HARMONIE/surface_pressure/'+ str(y) +'_surface_pressure.grib')"},{"path":"https://dnietolugilde.com/dsclim/articles/a1_Data_downloading_and_preprocessing.html","id":"reprojection-and-data-aggregation","dir":"Articles","previous_headings":"UERRA historical reanalysis data","what":"Reprojection and data aggregation","title":"1. Data downloading and preprocessing","text":"UERRA data come Lambert Conformal Conic Grid projection transformed WGS84 match data TraCE21ka CMIP5. Furthermore, subdaily (6 hour) data original files aggregated daily monthly data. variables kept original metric units, temperature used calculate maximum, minimum, mean daily temperatures, monthly averages. case precipitations, aggregation carried summing daily data, rest variables aggregation carried averaging subdaily (daily) daily (monthly) data. transformations carried using Climate Data Operator library (cdo). Temperature Precipitation Cloudiness Relative humidity Wind speed Surface pressure","code":"# BASH script  years=($(seq 1961 1990))  for y in \"${years[@]}\" do  # Temporal and spatial aggregation cdo -s -f nc remapcon,Data/UERRA/template_HARMONIE.nc -monavg -daymin Data/UERRA/UERRA-HARMONIE/2m_temperature/${y}_2m_temperature.grib Data/UERRA/UERRA-HARMONIE/2m_temperature/latlon/${y}_2m_tmin.nc  cdo -s -f nc remapcon,Data/UERRA/template_HARMONIE.nc -monavg -daymax Data/UERRA/UERRA-HARMONIE/2m_temperature/${y}_2m_temperature.grib Data/UERRA/UERRA-HARMONIE/2m_temperature/latlon/${y}_2m_tmax.nc  cdo -s -f nc remapcon,Data/UERRA/template_HARMONIE.nc -monavg -dayavg Data/UERRA/UERRA-HARMONIE/2m_temperature/${y}_2m_temperature.grib Data/UERRA/UERRA-HARMONIE/2m_temperature/latlon/${y}_2m_temperature.nc  done  # Temporal merging tmin_files=( Data/UERRA/UERRA-HARMONIE/2m_temperature/latlon/*_2m_tmin.nc ) cdo mergetime ${tmin_files[@]}  Data/UERRA/UERRA-HARMONIE/2m_temperature/latlon/1961-90_2m_tmin.nc  tmax_files=( Data/UERRA/UERRA-HARMONIE/2m_temperature/latlon/*_2m_tmax.nc ) cdo mergetime ${tmax_files[@]} Data/UERRA/UERRA-HARMONIE/2m_temperature/latlon/1961-90_2m_tmax.nc  tmean_files=( Data/UERRA/UERRA-HARMONIE/2m_temperature/latlon/*_2m_temperature.nc ) cdo mergetime ${tmean_files[@]} Data/UERRA/UERRA-HARMONIE/2m_temperature/latlon/1961-90_2m_temperature.nc  # Remove temporary files rm ${tmin_files[@]} ${tmax_files[@]} ${tmean_files[@]} # BASH script  years=($(seq 1961 1990))  for y in \"${years[@]}\" do  # Temporal and spatial aggregation cdo -s -f nc remapcon,Data/UERRA/template_SURFEX.nc -monsum Data/UERRA/MESCAN-SURFEX/total_precipitation/${y}_total_precipitation.grib Data/UERRA/MESCAN-SURFEX/total_precipitation/latlon/${y}_total_precipitation.nc  done  # Temporal merging prec_files=( Data/UERRA/MESCAN-SURFEX/total_precipitation/latlon/*_total_precipitation.nc ) cdo mergetime ${prec_files[@]} Data/UERRA/MESCAN-SURFEX/total_precipitation/latlon/1961-90_total_precipitation.nc  # Remove temporary files rm ${prec_files[@]} # BASH script  years=($(seq 1961 1990))  for y in \"${years[@]}\" do  # Temporal and spatial aggregation cdo -s -f nc remapcon,Data/UERRA/template_HARMONIE.nc -monavg Data/UERRA/UERRA-HARMONIE/total_cloud_cover/${y}_total_cloud_cover.grib Data/UERRA/UERRA-HARMONIE/total_cloud_cover/latlon/${y}_total_cloud_cover.nc  done  # Temporal merging cloud_files=( Data/UERRA/UERRA-HARMONIE/total_cloud_cover/latlon/*_total_cloud_cover.nc ) cdo mergetime ${cloud_files[@]}  Data/UERRA/UERRA-HARMONIE/total_cloud_cover/latlon/1961-90_total_cloud_cover.nc  # Remove temporary files rm ${cloud_files[@]} # BASH script  years=($(seq 1961 1990))  for y in \"${years[@]}\" do  # Temporal and spatial aggregation cdo -s -f nc remapcon,Data/UERRA/template_HARMONIE.nc -monavg Data/UERRA/UERRA-HARMONIE/2m_relative_humidity/${y}_2m_relative_humidity.grib Data/UERRA/UERRA-HARMONIE/2m_relative_humidity/latlon/${y}_2m_relative_humidity.nc  done  # Temporal merging rhum_files=( Data/UERRA/UERRA-HARMONIE/2m_relative_humidity/latlon/*_2m_relative_humidity.nc ) cdo mergetime ${rhum_files[@]} Data/UERRA/UERRA-HARMONIE/2m_relative_humidity/latlon/1961-90_2m_relative_humidity.nc  # Remove temporary files rm ${rhum_files[@]} # BASH script  years=($(seq 1961 1990))  for y in \"${years[@]}\" do  # Temporal and spatial aggregation cdo -s -f nc remapcon,Data/UERRA/template_HARMONIE.nc -monavg Data/UERRA/UERRA-HARMONIE/10m_wind_speed/${y}_10m_wind_speed.grib Data/UERRA/UERRA-HARMONIE/10m_wind_speed/latlon/${y}_10m_wind_speed.nc  done  # Temporal merging wspeed_files=( Data/UERRA/UERRA-HARMONIE/10m_wind_speed/latlon/*_10m_wind_speed.nc ) cdo mergetime ${wspeed_files[@]} Data/UERRA/UERRA-HARMONIE/10m_wind_speed/latlon/1961-90_10m_wind_speed.nc  # Remove temporary files rm ${wspeed_files[@]} # BASH script  years=($(seq 1961 1990))  for y in \"${years[@]}\" do  # Temporal and spatial aggregation cdo -s -f nc remapcon,Data/UERRA/template_HARMONIE.nc -monavg Data/UERRA/UERRA-HARMONIE/surface_pressure/${y}_surface_pressure.grib Data/UERRA/UERRA-HARMONIE/surface_pressure/latlon/${y}_surface_pressure.nc  done  # Temporal merging ps_files=( Data/UERRA/UERRA-HARMONIE/surface_pressure/latlon/*_surface_pressure.nc ) cdo mergetime ${ps_files[@]} Data/UERRA/UERRA-HARMONIE/surface_pressure/latlon/1961-90_surface_pressure.nc  # Remove temporary files rm ${ps_files}"},{"path":"https://dnietolugilde.com/dsclim/articles/a1_Data_downloading_and_preprocessing.html","id":"create-dictionary-1","dir":"Articles","previous_headings":"UERRA historical reanalysis data","what":"Create dictionary","title":"1. Data downloading and preprocessing","text":"order load files R, climate4R framework allow create dictionary used standardize variables climate4R vocabulary (check climate4R.UDG::C4R.vocabulary()).","code":"file.create(\"Data/UERRA/UERRA_dictionary.dic\")  writeLines(   c(     \"identifier,short_name,time_step,lower_time_bound,upper_time_bound,cell_method,offset,scale,deaccum,derived,interface\",     \"tasmin,2t,1mo,1,12,min,-273.15,1,0,0,\",     \"tasmax,2t,1mo,1,12,max,-273.15,1,0,0,\",     \"tas,2t,1mo,1,12,mean,-273.15,1,0,0,\",     \"pr,tp,1mo,1,12,sum,0,1,0,0,\",     \"hurs,2r,1mo,1,12,mean,0,1,0,0,\",     \"cld,tcc,1mo,1,12,mean,0,1,0,0,\",     \"wss,10si,1mo,1,12,mean,0,1,0,0,\",     \"ps,sp,1mo,1,12,mean,0,1,0,0,\"   ),   \"Data/UERRA/UERRA_dictionary.dic\" )"},{"path":"https://dnietolugilde.com/dsclim/articles/a1_Data_downloading_and_preprocessing.html","id":"cmip5-data","dir":"Articles","previous_headings":"","what":"CMIP5 data","title":"1. Data downloading and preprocessing","text":"CMIP5 data available different sources (e.g., CMIP5 website Climate Data Store). Given convenience downloading system Climate Data Store, use also download UERRA data, selected option.","code":""},{"path":"https://dnietolugilde.com/dsclim/articles/a1_Data_downloading_and_preprocessing.html","id":"downloading-files-from-dataserver-1","dir":"Articles","previous_headings":"CMIP5 data","what":"Downloading files from dataserver","title":"1. Data downloading and preprocessing","text":"CMIP5 data download two periods. one hand, historical period correspond 1850-2005 interval CMIP5 project. hand, future scenarios projections corresponded 2006-2100 interval. Although available data multiple General Circulation Models (GCMs) CMIP5 datasets, three needed variables four representative path ways (RCPs). Hence, downloaded needed variables (matching TraCE21ka UERRA datasets) three GCMs four RCPs.","code":""},{"path":"https://dnietolugilde.com/dsclim/articles/a1_Data_downloading_and_preprocessing.html","id":"historical-data","dir":"Articles","previous_headings":"CMIP5 data > Downloading files from dataserver","what":"Historical data","title":"1. Data downloading and preprocessing","text":"Select GCM CESM1_CAM5 CSIRO-Mk3-6-0 IPSL-CM5A-MR","code":"import cdsapi  c = cdsapi.Client()  c.retrieve(   'projections-cmip5-monthly-single-levels',   {     'ensemble_member': 'r1i1p1',     'format': 'zip',     'experiment': 'historical',     'variable': [       '10m_wind_speed',       '2m_temperature',       'maximum_2m_temperature_in_the_last_24_hours',       'minimum_2m_temperature_in_the_last_24_hours',       'near_surface_relative_humidity',       'surface_pressure',       'total_cloud_cover',       'mean_precipitation_flux',        ],     'model': 'cesm1_cam5',     'period': '185001-200512',   },   'CESM1-CAM5_historical.zip') import cdsapi  c = cdsapi.Client()  c.retrieve(   'projections-cmip5-monthly-single-levels',   {     'ensemble_member': 'r1i1p1',     'format': 'zip',     'experiment': 'historical',     'variable': [       '10m_wind_speed',       '2m_temperature',       'maximum_2m_temperature_in_the_last_24_hours',       'minimum_2m_temperature_in_the_last_24_hours',       'near_surface_relative_humidity',       'surface_pressure',       'total_cloud_cover',       'mean_precipitation_flux',      ],     'model': 'csiro_mk3_6_0',     'period': '185001-200512',   },   'CSIRO-Mk3-6-0_historical.zip') import cdsapi  c = cdsapi.Client()  c.retrieve(   'projections-cmip5-monthly-single-levels',   {     'ensemble_member': 'r1i1p1',     'format': 'zip',     'experiment': 'historical',     'variable': [       '10m_wind_speed',       '2m_temperature',       'maximum_2m_temperature_in_the_last_24_hours',       'minimum_2m_temperature_in_the_last_24_hours',        'near_surface_relative_humidity',       'surface_pressure',       'total_cloud_cover',       'mean_precipitation_flux',      ],     'model': 'ipsl_cm5a_mr',     'period': '185001-200512',   },   'IPSL-CM5A-MR_historical.zip')"},{"path":"https://dnietolugilde.com/dsclim/articles/a1_Data_downloading_and_preprocessing.html","id":"future-projections","dir":"Articles","previous_headings":"CMIP5 data > Downloading files from dataserver","what":"Future projections","title":"1. Data downloading and preprocessing","text":"Select General Circulation Model CESM1_CAM5 CSIRO-Mk3-6-0 IPSL-CM5A-MR","code":"import cdsapi  c = cdsapi.Client()  c.retrieve(   'projections-cmip5-monthly-single-levels',   {     'ensemble_member': 'r1i1p1',     'format': 'zip',     'experiment': 'rcp_2_6',     'variable': [       '10m_wind_speed',       '2m_temperature',       'maximum_2m_temperature_in_the_last_24_hours',       'minimum_2m_temperature_in_the_last_24_hours',       'near_surface_relative_humidity',       'surface_pressure',       'total_cloud_cover',       'mean_precipitation_flux',        ],     'model': 'cesm1_cam5',     'period': '200601-210012',   },   'CESM1-CAM5_RCP_2_6.zip') import cdsapi  c = cdsapi.Client()  c.retrieve(   'projections-cmip5-monthly-single-levels',   {     'ensemble_member': 'r1i1p1',     'format': 'zip',     'experiment': 'rcp_2_6',     'variable': [       '10m_wind_speed',       '2m_temperature',       'maximum_2m_temperature_in_the_last_24_hours',       'minimum_2m_temperature_in_the_last_24_hours',       'near_surface_relative_humidity',       'surface_pressure',       'total_cloud_cover',       'mean_precipitation_flux',      ],     'model': 'csiro_mk3_6_0',     'period': '200601-210012',   },   'CSIRO-Mk3-6-0_RCP_2_6.zip') import cdsapi  c = cdsapi.Client()  c.retrieve(   'projections-cmip5-monthly-single-levels',   {     'ensemble_member': 'r1i1p1',     'format': 'zip',     'experiment': 'rcp_2_6',     'variable': [       '10m_wind_speed',       '2m_temperature',       'maximum_2m_temperature_in_the_last_24_hours',       'minimum_2m_temperature_in_the_last_24_hours',        'near_surface_relative_humidity',       'surface_pressure',       'total_cloud_cover',       'mean_precipitation_flux',      ],     'model': 'ipsl_cm5a_mr',     'period': '200601-210012',   },   'IPSL-CM5A-MR_RCP_2_6.zip')"},{"path":[]},{"path":"https://dnietolugilde.com/dsclim/articles/a1_Data_downloading_and_preprocessing.html","id":"create-dictionary-2","dir":"Articles","previous_headings":"CMIP5 data","what":"Create dictionary","title":"1. Data downloading and preprocessing","text":"importing data R session, need define dictionary standarize units variables climate4R vocabulary (check climate4R.UDG::C4R.vocabulary().","code":"file.create(\"Data/CMIP5/CMIP5_dictionary.dic\")  writeLines(c(   \"identifier,short_name,time_step,lower_time_bound,upper_time_bound,cell_method,offset,scale,deaccum,derived,interface\",   \"tasmax,tasmax,1mo,0,12,max,-273.15,1,0,0,\",   \"tasmin,tasmin,1mo,0,12,min,-273.15,1,0,0,\",   \"tas,tas,1mo,0,12,mean,-273.15,1,0,0,\",   \"pr,pr,1mo,0,12,mean,0,2592000,0,0,\",   \"hurs,hurs,1mo,0,12,mean,0,1,0,0,\",   \"cld,clt,1mo,0,12,mean,0,1,0,0,\",   \"ps,ps,1mo,0,12,mean,0,1,0,0,\",   \"wss,sfcWind,1mo,0,12,mean,0,1,0,0,\" ), \"Data/CMIP5/CMIP5_dictionary.dic\")"},{"path":"https://dnietolugilde.com/dsclim/articles/a2_Load_source_data.html","id":"trace21ka-data","dir":"Articles","previous_headings":"","what":"TraCE21ka data","title":"2. Load source data","text":"Original TraCE21ka data NetCDF format. However, several characteristics makes straightforward import using function loadeR package. Hence, developed set wrapper functions import data R climate4r format. specifically, load TraCE21ka data historical period, use dsclim::loadHistoricalTraceGrid() function. function requires file (including path file) variable name (specified data dictionary standardization). Optionally, spatial coverage can controlled, specifying extent longitudinal latitudinal extents. tutorial use extent used create dsclim data Western Mediterranean region.","code":"library(dsclim)  trace.lon <- c(-25, 25) trace.lat <- c(25, 50)"},{"path":"https://dnietolugilde.com/dsclim/articles/a2_Load_source_data.html","id":"loading-trace21ka-data","dir":"Articles","previous_headings":"TraCE21ka data","what":"Loading TraCE21ka data","title":"2. Load source data","text":"function also allow specify starting ending year desired period. specified, uses period 1961 1990, years included. data loaded, used transformeR::climatology() function calculate average value variable whole period (e.g. 1961-1990) ?visualizeR::spatialPlot function plot resulting map. Select variable: TSMX TSMN TS PRECC RELHUM CLDTOT PS U V WSS Figure 1. Historical (1961-90) TraCE21ka data maximum surface temperature (tsmx). Figure 1. Historical (1961-90) TraCE21ka data minimum surface temperature (tsmn). Figure 1. Historical (1961-90) TraCE21ka data mean surface temperature (ts). Figure 1. Historical (1961-90) TraCE21ka data precipitation (pr). Figure 1. Historical (1961-90) TraCE21ka data relative humidity (rhum). Figure 1. Historical (1961-90) TraCE21ka data cloudiness (cld). Figure 1. Historical (1961-90) TraCE21ka data surface pressure (ps). Figure 1. Historical (1961-90) TraCE21ka data x-axis parallel wind component (u). Figure 1. Historical (1961-90) TraCE21ka data y-axis parallel wind component (v). Figure 1. Historical (1961-90) TraCE21ka data wind speed (wss).","code":"trace.tsmx <- dsclim::loadHistoricalTraceGrid(\"Data/TraCE21ka/TSMX/trace.36.400BP-1990CE.cam2.h0.TSMX.2160101-2204012.nc\", var = \"tasmax\", lon_lim = trace.lon, lat_lim = trace.lat, years = 1961:1990)  visualizeR::spatialPlot(transformeR::climatology(trace.tsmx), backdrop.theme = \"countries\", rev.colors = TRUE) trace.tsmn <- dsclim::loadHistoricalTraceGrid(\"Data/TraCE21ka/TSMN/trace.36.400BP-1990CE.cam2.h0.TSMN.2160101-2204012.nc\", var = \"tasmin\", lon_lim = trace.lon, lat_lim = trace.lat, years = 1961:1990)  visualizeR::spatialPlot(transformeR::climatology(trace.tsmn), backdrop.theme = \"countries\", rev.colors = TRUE) trace.ts <- dsclim::loadHistoricalTraceGrid(\"Data/TraCE21ka/TS/trace.36.400BP-1990CE.cam2.h0.TS.2160101-2204012.nc\", var = \"tas\", lon_lim = trace.lon, lat_lim = trace.lat, years = 1961:1990)  visualizeR::spatialPlot(transformeR::climatology(trace.ts), backdrop.theme = \"countries\", rev.colors = TRUE) trace.precc <- dsclim::loadHistoricalTraceGrid(\"Data/TraCE21ka/PRECC/trace.36.400BP-1990CE.cam2.h0.PRECC.2160101-2204012.nc\", var = \"pr\", lon_lim = trace.lon, lat_lim = trace.lat, years = 1961:1990)  visualizeR::spatialPlot(transformeR::climatology(trace.precc), backdrop.theme = \"countries\") trace.relhum <- dsclim::loadHistoricalTraceGrid(\"Data/TraCE21ka/RELHUM/trace.36.400BP-1990CE.cam2.h0.RELHUM.2160101-2204012.nc\", var = \"hurs@992.5561\", lon_lim = trace.lon, lat_lim = trace.lat, years = 1961:1990)  visualizeR::spatialPlot(transformeR::climatology(trace.relhum), backdrop.theme = \"countries\") trace.cldtot <- dsclim::loadHistoricalTraceGrid(\"Data/TraCE21ka/CLDTOT/trace.36.400BP-1990CE.cam2.h0.CLDTOT.2160101-2204012.nc\", var = \"cld\", lon_lim = trace.lon, lat_lim = trace.lat, years = 1961:1990)  visualizeR::spatialPlot(transformeR::climatology(trace.cldtot), backdrop.theme = \"countries\") trace.ps <- dsclim::loadHistoricalTraceGrid(\"Data/TraCE21ka/PS/trace.36.400BP-1990CE.cam2.h0.PS.2160101-2204012.nc\", var = \"ps\", lon_lim = trace.lon, lat_lim = trace.lat, years = 1961:1990)  visualizeR::spatialPlot(transformeR::climatology(trace.ps), backdrop.theme = \"countries\") trace.u <- dsclim::loadHistoricalTraceGrid(\"Data/TraCE21ka/U/trace.36.400BP-1990CE.cam2.h0.U.2160101-2204012.nc\", var = \"u@992.5561\", lon_lim = trace.lon, lat_lim = trace.lat, years = 1961:1990)  visualizeR::spatialPlot(transformeR::climatology(trace.u), backdrop.theme = \"countries\") trace.v <- dsclim::loadHistoricalTraceGrid(\"Data/TraCE21ka/V/trace.36.400BP-1990CE.cam2.h0.V.2160101-2204012.nc\", var = \"v@992.5561\", lon_lim = trace.lon, lat_lim = trace.lat, years = 1961:1990)  visualizeR::spatialPlot(transformeR::climatology(trace.v), backdrop.theme = \"countries\") trace.wss <- dsclim::computeWindSpeed(trace.u, trace.v)  visualizeR::spatialPlot(transformeR::climatology(trace.wss), backdrop.theme = \"countries\")"},{"path":"https://dnietolugilde.com/dsclim/articles/a2_Load_source_data.html","id":"make-multivariable-grid","dir":"Articles","previous_headings":"TraCE21ka data","what":"Make multivariable grid","title":"2. Load source data","text":"resulting objects can combined multigrid object. required afterwards use variables predictors downscaling process. Figure 2. Multigrid (variables object) historical (1961-90) TraCE21ka data.","code":"hist.trace <- transformeR::makeMultiGrid(trace.tsmx, trace.tsmn, trace.ts, trace.precc, trace.relhum, trace.cldtot, trace.ps, trace.wss)  rm(trace.tsmx, trace.tsmn, trace.ts, trace.precc, trace.relhum, trace.cldtot, trace.ps, trace.wss, trace.u, trace.v)  visualizeR::spatialPlot(transformeR::climatology(hist.trace), backdrop.theme = \"countries\")"},{"path":"https://dnietolugilde.com/dsclim/articles/a2_Load_source_data.html","id":"uerra-historical-reanalisis-data","dir":"Articles","previous_headings":"","what":"UERRA historical reanalisis data","title":"2. Load source data","text":"UERRA dataset transformed downloading reproject (see code vignette vignette(\"a1_Data_downloading_and_preprocessing\")). result transformation, obtained NetCDF files can directly imported R using loadGridData() loadeR package. function also allow specify geographical region subset loaded data.","code":"uerra.lon <- c(-11, 12) uerra.lat <- c(28, 44)"},{"path":"https://dnietolugilde.com/dsclim/articles/a2_Load_source_data.html","id":"loading-uerra-data","dir":"Articles","previous_headings":"UERRA historical reanalisis data","what":"Loading UERRA data","title":"2. Load source data","text":"Now, load tailored data UERRA dataset period 1961-1990. specifically, loaded variables interested downscale. grid objects used predictands downscale process. Select variable TASMIN TAS TASMAX PR HURS PS CLD WSS Figure 3. Historical (1961-90) UERRA data minimum surface temperature (tasmin). Figure 3. Historical (1961-90) UERRA data mean surface temperature (tas). Figure 3. Historical (1961-90) UERRA data maximum surface temperature (tasmax). Figure 3. Historical (1961-90) UERRA data precipitation (pr). Figure 3. Historical (1961-90) UERRA data relative humidity (rhum). Figure 3. Historical (1961-90) UERRA data surface pressure (ps). Figure 3. Historical (1961-90) UERRA data cloudiness (cld). Figure 3. Historical (1961-90) UERRA data wind speed (wss).","code":"uerra.tasmin <- loadeR::loadGridData(\"Data/UERRA/UERRA-HARMONIE/2m_temperature/latlon/1961-90_2m_tmin.nc\", var = \"tasmin\", lonLim = uerra.lon, latLim = uerra.lat, dictionary = \"Data/UERRA/dictionary.dic\")  visualizeR::spatialPlot(transformeR::climatology(uerra.tasmin), main = \"tasmin\", backdrop.theme = \"countries\", rev.colors = TRUE, at = seq(-15, 40, 1)) uerra.tas <- loadeR::loadGridData(\"Data/UERRA/UERRA-HARMONIE/2m_temperature/latlon/1961-90_2m_temperature.nc\", var = \"tas\", lonLim = uerra.lon, latLim = uerra.lat, dictionary = \"Data/UERRA/dictionary.dic\")  visualizeR::spatialPlot(transformeR::climatology(uerra.tas), main = \"tas\", backdrop.theme = \"countries\", rev.colors = TRUE, at = seq(-15, 40, 1)) uerra.tasmax <- loadeR::loadGridData(\"Data/UERRA/UERRA-HARMONIE/2m_temperature/latlon/1961-90_2m_tmax.nc\", var = \"tasmax\", lonLim = uerra.lon, latLim = uerra.lat, dictionary = \"Data/UERRA/dictionary.dic\")  visualizeR::spatialPlot(transformeR::climatology(uerra.tasmax), main = \"tasmax\", backdrop.theme = \"countries\", rev.colors = TRUE, at = seq(-15, 40, 1)) uerra.pr <- loadeR::loadGridData(\"Data/UERRA/MESCAN-SURFEX/total_precipitation/latlon/1961-90_total_precipitation.nc\", var = \"pr\", lonLim = uerra.lon, latLim = uerra.lat, dictionary = \"Data/UERRA/dictionary.dic\")  uerra.pr <- transformeR::upscaleGrid(uerra.pr, times = 2, aggr.fun = list(FUN = mean))  uerra.pr <- transformeR::interpGrid(uerra.pr, new.coordinates = transformeR::getGrid(uerra.tas), method = \"bilinear\")  visualizeR::spatialPlot(transformeR::climatology(uerra.pr), main = \"pr\", backdrop.theme = \"countries\", at = seq(0, 400, 25)) uerra.hurs <- loadeR::loadGridData(\"Data/UERRA/UERRA-HARMONIE/2m_relative_humidity/latlon/1961-90_2m_relative_humidity.nc\", var = \"hurs\", lonLim = uerra.lon, latLim = uerra.lat, dictionary = \"Data/UERRA/dictionary.dic\")  visualizeR::spatialPlot(transformeR::climatology(uerra.hurs), main = \"hurs\", backdrop.theme = \"countries\", rev.colors = TRUE) uerra.ps <- loadeR::loadGridData(\"Data/UERRA/UERRA-HARMONIE/surface_pressure/latlon/1961-90_surface_pressure.nc\", var = \"ps\", lonLim = uerra.lon, latLim = uerra.lat, dictionary = \"Data/UERRA/dictionary.dic\")  visualizeR::spatialPlot(transformeR::climatology(uerra.ps), main = \"ps\", backdrop.theme = \"countries\", rev.colors = TRUE) uerra.cld <- loadeR::loadGridData(\"Data/UERRA/UERRA-HARMONIE/total_cloud_cover/latlon/1961-90_total_cloud_cover.nc\", var = \"cld\", lonLim = uerra.lon, latLim = uerra.lat, dictionary = \"Data/UERRA/dictionary.dic\")  visualizeR::spatialPlot(transformeR::climatology(uerra.cld), main = \"cld\", backdrop.theme = \"countries\", rev.colors = TRUE) uerra.wss <- loadeR::loadGridData(\"Data/UERRA/UERRA-HARMONIE/10m_wind_speed/latlon/1961-90_10m_wind_speed.nc\", var = \"wss\", lonLim = uerra.lon, latLim = uerra.lat, dictionary = \"Data/UERRA/dictionary.dic\")  visualizeR::spatialPlot(transformeR::climatology(uerra.wss), main = \"wss\", backdrop.theme = \"countries\", rev.colors = TRUE)"},{"path":"https://dnietolugilde.com/dsclim/articles/a2_Load_source_data.html","id":"fix-dates","dir":"Articles","previous_headings":"UERRA historical reanalisis data","what":"Fix dates","title":"2. Load source data","text":"Dates UERRA files match actual year month, interpreted central date month, rather whole range data. modifyDates() function dsclim package modify dates fix small issue.","code":"uerra.tasmax <- modifyDates(uerra.tasmax) uerra.tasmin <- modifyDates(uerra.tasmin) uerra.tas <- modifyDates(uerra.tas) uerra.pr <- modifyDates(uerra.pr) uerra.ps <- modifyDates(uerra.ps) uerra.hurs <- modifyDates(uerra.hurs) uerra.cld <- modifyDates(uerra.cld) uerra.wss <- modifyDates(uerra.wss)"},{"path":"https://dnietolugilde.com/dsclim/articles/a2_Load_source_data.html","id":"cmip5-future-data","dir":"Articles","previous_headings":"","what":"CMIP5 future data","title":"2. Load source data","text":"CMIP5 data can directly loaded loadGridData() loadeR package. , used extent TraCE21ka dataset. example, going use data set rcp2.6 CESM1-CAM5 combination representative concentration pathways general circulation model.","code":"cmip5.lon <- c(-11.25, 12.50) cmip5.lat <- c(27, 45)"},{"path":"https://dnietolugilde.com/dsclim/articles/a2_Load_source_data.html","id":"loading-cmip5-data","dir":"Articles","previous_headings":"CMIP5 future data","what":"Loading CMIP5 data","title":"2. Load source data","text":"Select variable TASMIN TAS TASMAX PR HURS PS CLD WSS Figure 4. Historical (1961-90) CMIP5 data minimum surface temperature (tasmin). Figure 4. Historical (1961-90) CMIP5 data mean surface temperature (tas). Figure 4. Historical (1961-90) CMIP5 data maximum surface temperature (tasmax). Figure 4. Historical (1961-90) CMIP5 data precipitation (pr). Figure 4. Historical (1961-90) CMIP5 data relative humidity (rhum). Figure 4. Historical (1961-90) CMIP5 data surface pressure (ps). Figure 4. Historical (1961-90) CMIP5 data cloudiness (cld). Figure 4. Historical (1961-90) CMIP5 data wind speed (wss).","code":"cmip.tasmin <- loadeR::loadGridData(\"Data/CMIP5/historical/CESM1-CAM5_historical/tasmin_Amon_CESM1-CAM5_historical_r1i1p1_185001-200512.nc\", var = \"tasmin\", lonLim = cmip5.lon, latLim = cmip5.lat, years = 1961:1990, dictionary = \"Data/CMIP5/dictionary.dic\")  visualizeR::spatialPlot(transformeR::climatology(cmip.tasmin), main = \"tasmin\", backdrop.theme = \"countries\", rev.colors = TRUE, at = seq(-15, 40, 1)) cmip.tas <- loadeR::loadGridData(\"Data/CMIP5/historical/CESM1-CAM5_historical/tas_Amon_CESM1-CAM5_historical_r1i1p1_185001-200512.nc\", var = \"tas\", lonLim = cmip5.lon, latLim = cmip5.lat, years = 1961:1990, dictionary = \"Data/CMIP5/dictionary.dic\")  visualizeR::spatialPlot(transformeR::climatology(cmip.tas), main = \"tas\", backdrop.theme = \"countries\", rev.colors = TRUE, at = seq(-15, 40, 1)) cmip.tasmax <- loadeR::loadGridData(\"Data/CMIP5/historical/CESM1-CAM5_historical/tasmax_Amon_CESM1-CAM5_historical_r1i1p1_185001-200512.nc\", var = \"tasmax\", lonLim = cmip5.lon, latLim = cmip5.lat, years = 1961:1990, dictionary = \"Data/CMIP5/dictionary.dic\")  visualizeR::spatialPlot(transformeR::climatology(cmip.tasmax), main = \"tasmax\", backdrop.theme = \"countries\", rev.colors = TRUE, at = seq(-15, 40, 1)) cmip.pr <- loadeR::loadGridData(\"Data/CMIP5/historical/CESM1-CAM5_historical/pr_Amon_CESM1-CAM5_historical_r1i1p1_185001-200512.nc\", var = \"pr\", lonLim = cmip5.lon, latLim = cmip5.lat, years = 1961:1990, dictionary = \"Data/CMIP5/dictionary.dic\")  visualizeR::spatialPlot(transformeR::climatology(cmip.pr), main = \"pr\", backdrop.theme = \"countries\", at = seq(0, 400, 25)) cmip.hurs <- loadeR::loadGridData(\"Data/CMIP5/historical/CESM1-CAM5_historical/hurs_Amon_CESM1-CAM5_historical_r1i1p1_185001-200512.nc\", var = \"hurs\", lonLim = cmip5.lon, latLim = cmip5.lat, years = 1961:1990, dictionary = \"Data/CMIP5/dictionary.dic\")  visualizeR::spatialPlot(transformeR::climatology(cmip.hurs), main = \"hurs\", backdrop.theme = \"countries\", rev.colors = TRUE) cmip.ps <- loadeR::loadGridData(\"Data/CMIP5/historical/CESM1-CAM5_historical/ps_Amon_CESM1-CAM5_historical_r1i1p1_185001-200512.nc\", var = \"ps\", lonLim = cmip5.lon, latLim = cmip5.lat, years = 1961:1990, dictionary = \"Data/CMIP5/dictionary.dic\")  visualizeR::spatialPlot(transformeR::climatology(cmip.ps), main = \"ps\", backdrop.theme = \"countries\", rev.colors = TRUE) cmip.cld <- loadeR::loadGridData(\"Data/CMIP5/historical/CESM1-CAM5_historical/clt_Amon_CESM1-CAM5_historical_r1i1p1_185001-200512.nc\", var = \"cld\", lonLim = cmip5.lon, latLim = cmip5.lat, years = 1961:1990, dictionary = \"Data/CMIP5/dictionary.dic\")  visualizeR::spatialPlot(transformeR::climatology(cmip.cld), main = \"cld\", backdrop.theme = \"countries\", rev.colors = TRUE) cmip.wss <- loadeR::loadGridData(\"Data/CMIP5/historical/CESM1-CAM5_historical/sfcWind_Amon_CESM1-CAM5_historical_r1i1p1_185001-200512.nc\", var = \"wss\", lonLim = cmip5.lon, latLim = cmip5.lat, years = 1961:1990, dictionary = \"Data/CMIP5/dictionary.dic\")  visualizeR::spatialPlot(transformeR::climatology(cmip.wss), main = \"wss\", backdrop.theme = \"countries\", rev.colors = TRUE)"},{"path":"https://dnietolugilde.com/dsclim/articles/a2_Load_source_data.html","id":"fix-dates-1","dir":"Articles","previous_headings":"CMIP5 future data","what":"Fix dates","title":"2. Load source data","text":"Similarly UERRA data, dates CMIP5 files match actual year month, interpreted central date month, rather whole range data. , modifyDates() function dsclim package modify dates fix helps fix small issue.","code":"cmip.tasmax <- modifyDates(cmip.tasmax) cmip.tasmin <- modifyDates(cmip.tasmin) cmip.tas <- modifyDates(cmip.tas) cmip.pr <- modifyDates(cmip.pr) cmip.ps <- modifyDates(cmip.ps) cmip.hurs <- modifyDates(cmip.hurs) cmip.cld <- modifyDates(cmip.cld) cmip.wss <- modifyDates(cmip.wss)"},{"path":"https://dnietolugilde.com/dsclim/articles/a2_Load_source_data.html","id":"make-multivariable-grid-1","dir":"Articles","previous_headings":"CMIP5 future data","what":"Make multivariable grid","title":"2. Load source data","text":"Similarly TraCE21ka dataset, resulting objects CMIP5 dataset can combined multigrid object. required afterwards use variables predictors downscaling process. Figure 5. Multigrid (variables object) historical (1961-90) CMIP5 data.","code":"hist.cmip <- transformeR::makeMultiGrid(cmip.tasmax, cmip.tasmin, cmip.tas, cmip.pr, cmip.hurs, cmip.cld, cmip.ps, cmip.wss)  rm(cmip.tasmax, cmip.tasmin, cmip.tas, cmip.pr, cmip.hurs, cmip.cld, cmip.ps, cmip.wss)  visualizeR::spatialPlot(transformeR::climatology(hist.cmip), backdrop.theme = \"countries\")"},{"path":[]},{"path":"https://dnietolugilde.com/dsclim/articles/a3_Downscale_with_Cross-validation.html","id":"defining-variables-and-folds-for-crossvalidation","dir":"Articles","previous_headings":"Downscaling","what":"Defining variables and folds for crossvalidation","title":"3. Downscaling with crossvalidation","text":"","code":"library(dsclim)  vars <- c(   \"tas\", \"tasmax\", \"tasmin\", \"hurs@992.5561\", \"ps\",   \"pr\", \"cld\", \"wss\" )  local.var <- \"tasmin\"  folds <- list(1961:1965, 1966:1970, 1971:1975, 1976:1980, 1981:1985, 1986:1990)  trace.dir <- \"../../Data/TraCE21ka/\""},{"path":"https://dnietolugilde.com/dsclim/articles/a3_Downscale_with_Cross-validation.html","id":"defining-parameters-for-downscaling","dir":"Articles","previous_headings":"Downscaling","what":"Defining parameters for downscaling","title":"3. Downscaling with crossvalidation","text":"","code":"library(downscaleR)  spatial.pars <- list(   which.combine = vars,   v.exp = .95,   rot = FALSE )  local.pars.M21 <- list(n = 1, vars = local.var)  local.pars.M24 <- list(n = 4, vars = local.var)  local.pars.M31 <- list(n = 1, vars = vars)  local.pars.M34 <- list(n = 4, vars = vars)"},{"path":"https://dnietolugilde.com/dsclim/articles/a3_Downscale_with_Cross-validation.html","id":"data-loading","dir":"Articles","previous_headings":"Downscaling","what":"Data loading","title":"3. Downscaling with crossvalidation","text":"","code":"trace.file.names <- traceFileNames(trace.dir) hist.trace <- dsclim::loadTrace(trace.file.names, years = 1961:1990) hist.trace$Variable$varName head(hist.trace$Dates[[1]]$start) tail(hist.trace$Dates[[1]]$start) head(hist.trace$Dates[[1]]$end) tail(hist.trace$Dates[[1]]$end) uerra.data <- loadUerra(\"../../Data/UERRA/UERRA-HARMONIE/2m_temperature/latlon/1961-90_2m_tmin.nc\", local.var) uerra.data$Variable$varName head(uerra.data$Dates$start) head(uerra.data$Dates$end) tail(uerra.data$Dates$end) tail(uerra.data$Dates$end)"},{"path":"https://dnietolugilde.com/dsclim/articles/a3_Downscale_with_Cross-validation.html","id":"downscaling-1","dir":"Articles","previous_headings":"Downscaling","what":"Downscaling","title":"3. Downscaling with crossvalidation","text":"Select model GLM.1.sp GLM.21 GLM.21.sp GLM.24 GLM.24.sp GLM.31 GLM.34 Downscaled minimum temperature TraCE21ka period 1960-90 using UERRA period GLM.1.sp downscaling specifications. Downscaled minimum temperature TraCE21ka period 1960-90 using UERRA period GLM.21 downscaling specifications. Downscaled minimum temperature TraCE21ka period 1960-90 using UERRA period GLM.21.sp downscaling specifications. Downscaled minimum temperature TraCE21ka period 1960-90 using UERRA period GLM.24 downscaling specifications. Downscaled minimum temperature TraCE21ka period 1960-90 using UERRA period GLM.24.sp downscaling specifications. Downscaled minimum temperature TraCE21ka period 1960-90 using UERRA period GLM.31 downscaling specifications. Downscaled minimum temperature TraCE21ka period 1961-90 using UERRA period GLM.34 downscaling specifications.","code":"GLM.1.sp <- downscaleR::downscaleCV(   x = hist.trace,   y = uerra.data,   method = \"GLM\",   family = gaussian(link = \"identity\"),   folds = folds,   prepareData.args = list(     global.vars = NULL,     local.predictors = NULL,     spatial.predictors = spatial.pars,     combined.only = TRUE   ) )  visualizeR::spatialPlot(transformeR::climatology(GLM.1.sp)) GLM.21 <- downscaleR::downscaleCV(   x = hist.trace,   y = uerra.data,   method = \"GLM\",   family = gaussian(link = \"identity\"),   folds = folds,   prepareData.args = list(     global.vars = NULL,     local.predictors = local.pars.M21,     spatial.predictors = NULL   ) )  visualizeR::spatialPlot(transformeR::climatology(GLM.21)) GLM.21.sp <- downscaleR::downscaleCV(   x = hist.trace,   y = uerra.data,   method = \"GLM\",   family = gaussian(link = \"identity\"),   folds = folds,   prepareData.args = list(     global.vars = NULL,     local.predictors = local.pars.M21,     spatial.predictors = spatial.pars,     combined.only = TRUE   ) )  visualizeR::spatialPlot(transformeR::climatology(GLM.21.sp)) GLM.24 <- downscaleR::downscaleCV(   x = hist.trace,   y = uerra.data,   method = \"GLM\",   family = gaussian(link = \"identity\"),   folds = folds,   prepareData.args = list(     global.vars = NULL,     local.predictors = local.pars.M24,     spatial.predictors = NULL   ) )  visualizeR::spatialPlot(transformeR::climatology(GLM.24)) GLM.24.sp <- downscaleR::downscaleCV(   x = hist.trace,   y = uerra.data,   method = \"GLM\",   family = gaussian(link = \"identity\"),   folds = folds,   prepareData.args = list(     global.vars = NULL,     local.predictors = local.pars.M24,     spatial.predictors = spatial.pars   ) )  visualizeR::spatialPlot(transformeR::climatology(GLM.24.sp)) GLM.31 <- downscaleR::downscaleCV(   x = hist.trace,   y = uerra.data,   method = \"GLM\",   family = gaussian(link = \"identity\"),   folds = folds,   prepareData.args = list(     global.vars = NULL,     local.predictors = local.pars.M31,     spatial.predictors = NULL   ) )  visualizeR::spatialPlot(transformeR::climatology(GLM.31)) GLM.34 <- downscaleR::downscaleCV(   x = hist.trace,   y = uerra.data,   method = \"GLM\",   family = gaussian(link = \"identity\"),   folds = folds,   prepareData.args = list(     global.vars = NULL,     local.predictors = local.pars.M34,     spatial.predictors = NULL   ) )  visualizeR::spatialPlot(transformeR::climatology(GLM.34))"},{"path":[]},{"path":"https://dnietolugilde.com/dsclim/articles/a3_Downscale_with_Cross-validation.html","id":"create-function-to-extract-info","dir":"Articles","previous_headings":"Evaluate downscaling performance","what":"Create function to extract info","title":"3. Downscaling with crossvalidation","text":"","code":"ds_validation <- function(models, obs, measure.code = \"bias\", index.code) {   l <- lapply(     1:length(models),     function(i) {       suppressMessages(         climate4R.value::valueMeasure(           obs,           x = get(models[i]),           measure.code = measure.code,           index.code = index.code         )$Measure       )     }   )   names(l) <- models   return(l) }"},{"path":"https://dnietolugilde.com/dsclim/articles/a3_Downscale_with_Cross-validation.html","id":"run-evaluation","dir":"Articles","previous_headings":"Evaluate downscaling performance","what":"Run evaluation","title":"3. Downscaling with crossvalidation","text":"","code":"ds.methods <- c(\"GLM.1.sp\", \"GLM.21\", \"GLM.21.sp\", \"GLM.24\", \"GLM.24.sp\", \"GLM.31\", \"GLM.34\")  value.indices <- c(\"Mean\", \"sd\", \"Skewness\")  library(parallel)  cl <- makeCluster(detectCores())  clusterExport(cl, c(\"ds_validation\", ds.methods, \"uerra.data\", \"value.indices\"))  val.results <- parLapply(   cl,   value.indices,   function(i, j, k, l) {     ds_validation(       models = j,       obs = k,       measure.code = l,       index.code = i     )   },   ds.methods,   uerra.data,   \"bias\" )  stopCluster(cl)  names(val.results) <- value.indices"},{"path":[]},{"path":"https://dnietolugilde.com/dsclim/articles/a3_Downscale_with_Cross-validation.html","id":"error-or-bias-maps","dir":"Articles","previous_headings":"Plot evaluations’ results","what":"Error (or bias) maps","title":"3. Downscaling with crossvalidation","text":"Select model GLM.1.sp GLM.21 GLM.21.sp GLM.24 GLM.24.sp GLM.31 GLM.34 Bias map GLM.1.sp downscaled model Bias map GLM.21 downscaled model Bias map GLM.21.sp downscaled model Bias map GLM.24 downscaled model Bias map GLM.24.sp downscaled model Bias map GLM.31 downscaled model Bias map GLM.34 downscaled model","code":"visualizeR::spatialPlot(val.results[[1]][[1]],   backdrop.theme = \"countries\",   main = \"GLM.1.sp - bias mean\" ) visualizeR::spatialPlot(val.results[[1]][[2]],   backdrop.theme = \"countries\",   main = \"GLM.21 - bias mean\" ) visualizeR::spatialPlot(val.results[[1]][[3]],   backdrop.theme = \"countries\",   main = \"GLM.21.sp - bias mean\" ) visualizeR::spatialPlot(val.results[[1]][[4]],   backdrop.theme = \"countries\",   main = \"GLM.24 - bias mean\" ) visualizeR::spatialPlot(val.results[[1]][[5]],   backdrop.theme = \"countries\",   main = \"GLM.24.sp - bias mean\" ) visualizeR::spatialPlot(val.results[[1]][[6]],   backdrop.theme = \"countries\",   main = \"GLM.31 - bias mean\" ) visualizeR::spatialPlot(val.results[[1]][[7]],   backdrop.theme = \"countries\",   main = \"GLM.34 - bias mean\" )"},{"path":"https://dnietolugilde.com/dsclim/articles/a3_Downscale_with_Cross-validation.html","id":"violin-plots-sumarizing-results","dir":"Articles","previous_headings":"Plot evaluations’ results","what":"Violin plots sumarizing results","title":"3. Downscaling with crossvalidation","text":"Bias summary","code":"library(reshape2) library(ggplot2) getGridData <- function(grid) grid$Data  test <- lapply(val.results, FUN = function(x) lapply(x, getGridData))  test <- melt(test)  test$mean <- ave(test$value, as.factor(test$L1), as.factor(test$L2), FUN = mean)  test$L2 <- factor(test$L2, levels = ds.methods) test$L1 <- factor(test$L1, levels = value.indices)  ggplot(test, aes(x = L2, y = value)) +   geom_violin(aes(fill = mean)) +   facet_grid(L1 ~ ., scales = \"free\")"},{"path":"https://dnietolugilde.com/dsclim/articles/a3_Downscale_with_Cross-validation.html","id":"error-or-bias-histograms","dir":"Articles","previous_headings":"Plot evaluations’ results","what":"Error or bias histograms","title":"3. Downscaling with crossvalidation","text":"Bias summary histograms","code":"library(transformeR) par(mfrow = c(3, 3)) hist(scaleGrid(GLM.1.sp, uerra.data)$Data) hist(scaleGrid(GLM.21, uerra.data)$Data) hist(scaleGrid(GLM.21.sp, uerra.data)$Data) hist(scaleGrid(GLM.24, uerra.data)$Data) hist(scaleGrid(GLM.24.sp, uerra.data)$Data) hist(scaleGrid(GLM.31, uerra.data)$Data) hist(scaleGrid(GLM.34, uerra.data)$Data)"},{"path":[]},{"path":"https://dnietolugilde.com/dsclim/articles/a4_Downscale_climate_data.html","id":"defining-variables-and-folds-for-crossvalidation","dir":"Articles","previous_headings":"Defining common parameters","what":"Defining variables and folds for crossvalidation","title":"4. Downscaling climate data","text":"","code":"library(dsclim) library(downscaleR) vars <- c(   \"tas\", \"tasmin\", \"tasmax\", \"hurs@992.5561\", \"ps\",   \"pr\", \"cld\", \"wss\" )  spatial.pars <- list(   which.combine = vars,   v.exp = .95,   rot = FALSE )  family.link <- gaussian(link = \"identity\")  global.nc.attributes <- list(\"author\" = \"Diego Nieto Lugilde & Daniel Romera Romera\", \"institution\" = \"Universidad de Cordoba\", \"email\" = \"bv2nilud@uco.es\")"},{"path":"https://dnietolugilde.com/dsclim/articles/a4_Downscale_climate_data.html","id":"loading-uerra-data","dir":"Articles","previous_headings":"Defining common parameters","what":"Loading UERRA data","title":"4. Downscaling climate data","text":"","code":"uerra <- loadUerra(\"../../Data/UERRA/UERRA-HARMONIE/2m_temperature/latlon/1961-90_2m_temperature.nc\", \"tas\")"},{"path":[]},{"path":"https://dnietolugilde.com/dsclim/articles/a4_Downscale_climate_data.html","id":"loading-trace21ka-data","dir":"Articles","previous_headings":"Downscale TraCE21ka data","what":"Loading TraCE21ka data","title":"4. Downscaling climate data","text":"","code":"trace.file.names <- traceFileNames(\"../../Data/TraCE21ka/\") hist.trace <- loadTrace(trace.file.names, years = 1961:1990)"},{"path":"https://dnietolugilde.com/dsclim/articles/a4_Downscale_climate_data.html","id":"prepare-data-for-downscaling","dir":"Articles","previous_headings":"Downscale TraCE21ka data","what":"Prepare data for downscaling","title":"4. Downscaling climate data","text":"","code":"data <- downscaleR::prepareData(hist.trace, uerra, spatial.predictors = spatial.pars)"},{"path":"https://dnietolugilde.com/dsclim/articles/a4_Downscale_climate_data.html","id":"train-downscaling-model","dir":"Articles","previous_headings":"Downscale TraCE21ka data","what":"Train downscaling model","title":"4. Downscaling climate data","text":"","code":"model <- downscaleR::downscaleTrain(data, method = \"GLM\", family = family.link, predict = TRUE)"},{"path":"https://dnietolugilde.com/dsclim/articles/a4_Downscale_climate_data.html","id":"downscale-a-single-trace21ka-file","dir":"Articles","previous_headings":"Downscale TraCE21ka data","what":"Downscale a single TraCE21ka file","title":"4. Downscaling climate data","text":"","code":"downscaleTrace(4, \"../../Data/TraCE21ka/\", \"prueba/TraCE21ka/\", mod_data = data, model = model, global_nc_attributes = global.nc.attributes)"},{"path":"https://dnietolugilde.com/dsclim/articles/a4_Downscale_climate_data.html","id":"downscale-all-trace21ka-files-for-a-single-variable","dir":"Articles","previous_headings":"Downscale TraCE21ka data","what":"Downscale all TraCE21ka files for a single variable","title":"4. Downscaling climate data","text":"","code":"lapply(1:36, downscaleTrace, \"prueba/\", \"../../Data/TraCE21ka/\", hist_trace = hist.trace, mod_data = data, model = model, global_nc_attributes = global.nc.attributes)"},{"path":[]},{"path":"https://dnietolugilde.com/dsclim/articles/a4_Downscale_climate_data.html","id":"defining-specific-arguments","dir":"Articles","previous_headings":"Downscale CMIP5 data","what":"Defining specific arguments","title":"4. Downscaling climate data","text":"","code":"cmip5.rcps <- c(\"rcp2.6\", \"rcp4.5\", \"rcp6.0\", \"rcp8.5\") cmip5.mods <- c(\"CESM1-CAM5\", \"CSIRO-Mk3-6-0\", \"IPSL-CM5A-MR\") vars <- c(\"tas\", \"tasmax\", \"tasmin\", \"hurs\", \"ps\", \"pr\", \"cld\", \"wss\")  df <- expand.grid(cmip5.rcps, cmip5.mods)"},{"path":"https://dnietolugilde.com/dsclim/articles/a4_Downscale_climate_data.html","id":"downscaling-cmip5-data-for-a-single-combination-of-rcps-and-climate-model","dir":"Articles","previous_headings":"Downscale CMIP5 data","what":"Downscaling CMIP5 data for a single combination of RCPs and climate model","title":"4. Downscaling climate data","text":"","code":"downscaleCMIP5(cmip5.rcps[[1]], cmip5.mods[[1]], indir = \"../../Data/CMIP5/\", uerra, outdir = \"prueba/CMIP5/\", method = \"GLM\", family_link = \"gaussian\", spatial_pars = spatial.pars, global_nc_attributes = global.nc.attributes)"},{"path":"https://dnietolugilde.com/dsclim/articles/a4_Downscale_climate_data.html","id":"downscaling-cmip5-data-for-all-combination-of-rcps-and-climate-models","dir":"Articles","previous_headings":"Downscale CMIP5 data","what":"Downscaling CMIP5 data for all combination of RCPs and climate models","title":"4. Downscaling climate data","text":"","code":"mapply(downscaleCMIP5, df$Var1, df$Var2, MoreArgs = list(indir = \"../../Data/CMIP5/\", uerra = uerra, outdir = \"prueba/CMIP5/\", method = \"GLM\", family_link = \"gaussian\", spatial_pars = spatial.pars, global_nc_attributes = global.nc.attributes))"},{"path":"https://dnietolugilde.com/dsclim/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Diego Nieto-Lugilde. Author, maintainer. Daniel Romera-Romera. Author.","code":""},{"path":"https://dnietolugilde.com/dsclim/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Nieto-Lugilde D, Romera-Romera D (2022). dsclim: Functions downscale grid climate data (TraCE21ka CMIP5). https://github.com/dinilu/dsclim, https://dnietolugilde.com/dsclim/.","code":"@Manual{,   title = {dsclim: Functions to downscale grid climate data (TraCE21ka or CMIP5)},   author = {Diego Nieto-Lugilde and Daniel Romera-Romera},   year = {2022},   note = {https://github.com/dinilu/dsclim, https://dnietolugilde.com/dsclim/}, }"},{"path":"https://dnietolugilde.com/dsclim/index.html","id":"dsclim","dir":"","previous_headings":"","what":"Functions to downscale grid climate data (TraCE21ka or CMIP5)","title":"Functions to downscale grid climate data (TraCE21ka or CMIP5)","text":"goal dsclim ease use climate4r package downscale TraCE21ka CMIP5 climate data combination UERRA reanalysis data.","code":""},{"path":"https://dnietolugilde.com/dsclim/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Functions to downscale grid climate data (TraCE21ka or CMIP5)","text":"can install development version dsclim like :","code":"# install.packages(\"devtools\") devtools::install_github(\"dinilu/dsclim\", build_vignettes = TRUE)"},{"path":"https://dnietolugilde.com/dsclim/reference/computeWindSpeed.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute wind speed from their horizontal (u) and vertical (v) components. — computeWindSpeed","title":"Compute wind speed from their horizontal (u) and vertical (v) components. — computeWindSpeed","text":"Compute wind speed horizontal (u) vertical (v) components.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/computeWindSpeed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute wind speed from their horizontal (u) and vertical (v) components. — computeWindSpeed","text":"","code":"computeWindSpeed(u, v)"},{"path":"https://dnietolugilde.com/dsclim/reference/computeWindSpeed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute wind speed from their horizontal (u) and vertical (v) components. — computeWindSpeed","text":"u climate4R grid object east-west wind component (see loadeR::loadGridData). v climate4R grid object north-south wind component (see loadeR::loadGridData).","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/computeWindSpeed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute wind speed from their horizontal (u) and vertical (v) components. — computeWindSpeed","text":"climate4R grid object total wind speed.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/computeWindSpeed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute wind speed from their horizontal (u) and vertical (v) components. — computeWindSpeed","text":"","code":"if (FALSE) { trace.u <- dsclim::loadHistoricalTraceGrid(   \"Data/TraCE21ka/U/trace.36.400BP-1990CE.cam2.h0.U.2160101-2204012.nc\",   var = \"u@992.5561\" ) trace.v <- dsclim::loadHistoricalTraceGrid(   \"Data/TraCE21ka/V/trace.36.400BP-1990CE.cam2.h0.V.2160101-2204012.nc\",   var = \"v@992.5561\" )  trace.wss <- dsclim::compute_wind_speed(trace.u, trace.v) }"},{"path":"https://dnietolugilde.com/dsclim/reference/dictionaryLookup.html","id":null,"dir":"Reference","previous_headings":"","what":"Searches variable string in the dictionary — dictionaryLookup","title":"Searches variable string in the dictionary — dictionaryLookup","text":"Searches variable string provided dictionary map vocabulary, order get necessary information variable homogenization. also includes new column specifying aggregation function applied ().","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/dictionaryLookup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Searches variable string in the dictionary — dictionaryLookup","text":"","code":"dictionaryLookup(dicPath, var, time)"},{"path":"https://dnietolugilde.com/dsclim/reference/dictionaryLookup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Searches variable string in the dictionary — dictionaryLookup","text":"dicPath Full path dictionary file (csv file extension ‘.dic’). var Character string (standard) name variable time Time specification.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/dictionaryLookup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Searches variable string in the dictionary — dictionaryLookup","text":"data.frame 1 row mapping information","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/dictionaryLookup.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Searches variable string in the dictionary — dictionaryLookup","text":"http://meteo.unican.es/trac/wiki/udg/ecoms/RPackage/homogeneization","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/dictionaryLookup.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Searches variable string in the dictionary — dictionaryLookup","text":"J. Bedia, S. Herrera","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/dot-DateSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Create dates sequence — .DateSeq","title":"Create dates sequence — .DateSeq","text":"Create dates sequence","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/dot-DateSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create dates sequence — .DateSeq","text":"","code":".DateSeq(st, en, freq, frac = 0)"},{"path":"https://dnietolugilde.com/dsclim/reference/dot-DateSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create dates sequence — .DateSeq","text":"st Character string indicating starting date sequencce format \"yyyy-mm-dd\". en Character string indicating ending date sequencce format \"yyyy-mm-dd\". freq Numeric value indicating frequency dates within year. instance, monthly dates required, freq 12. However, annual dates required, freq 1. frac Numeric value indicating period supplied zoo::.Date. used specified first day month frac = 0, last day month frac = 1.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/dot-DateSeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create dates sequence — .DateSeq","text":"Date object (see base::.Date)","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/dot-copyXYCoords.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy coordinates from one grid to another — .copyXYCoords","title":"Copy coordinates from one grid to another — .copyXYCoords","text":"Copy coordinates one grid another","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/dot-copyXYCoords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy coordinates from one grid to another — .copyXYCoords","text":"","code":".copyXYCoords(x, y)"},{"path":"https://dnietolugilde.com/dsclim/reference/dot-copyXYCoords.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy coordinates from one grid to another — .copyXYCoords","text":"x grid object (see loadeR::loadGridData function) modified. y grid object extract coordinates info.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/dot-copyXYCoords.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy coordinates from one grid to another — .copyXYCoords","text":"x grid object coordinates info y grid object.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/dot-elementwise.all.equal.html","id":null,"dir":"Reference","previous_headings":"","what":"Check equality in all elements of two vectors — .elementwise.all.equal","title":"Check equality in all elements of two vectors — .elementwise.all.equal","text":"Check equality elements two vectors","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/dot-elementwise.all.equal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check equality in all elements of two vectors — .elementwise.all.equal","text":"","code":".elementwise.all.equal(x, y)"},{"path":"https://dnietolugilde.com/dsclim/reference/dot-elementwise.all.equal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check equality in all elements of two vectors — .elementwise.all.equal","text":"x Vector y Vector","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/dot-elementwise.all.equal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check equality in all elements of two vectors — .elementwise.all.equal","text":"Logical value indicating whether elements two vectors equal .","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/dot-recalcGridResolution.html","id":null,"dir":"Reference","previous_headings":"","what":"Recalculate grid resolution — .recalcGridResolution","title":"Recalculate grid resolution — .recalcGridResolution","text":"Recalculate grid resolution","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/dot-recalcGridResolution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recalculate grid resolution — .recalcGridResolution","text":"","code":".recalcGridResolution(grid)"},{"path":"https://dnietolugilde.com/dsclim/reference/dot-recalcGridResolution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recalculate grid resolution — .recalcGridResolution","text":"grid List object climate4R framework (see loadeR::loadGridData).","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/dot-recalcGridResolution.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recalculate grid resolution — .recalcGridResolution","text":"modified version grid object new resX resY info based actual coordinates xyCoords already grid object.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/dot-recalcGridResolution.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recalculate grid resolution — .recalcGridResolution","text":"function designed recalculate grid resolution grid object cropped geographical subset region.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/downscaleCMIP5.html","id":null,"dir":"Reference","previous_headings":"","what":"Downscale CMIP5 grid data — downscaleCMIP5","title":"Downscale CMIP5 grid data — downscaleCMIP5","text":"Downscale CMIP5 grid data","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/downscaleCMIP5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downscale CMIP5 grid data — downscaleCMIP5","text":"","code":"downscaleCMIP5(   rcp,   mod,   indir,   uerra,   outdir,   vars = NULL,   cmip5_vars = NULL,   lon_lim = c(-11, 12),   lat_lim = c(28, 44),   years = 1991:2100,   dictionary = system.file(\"extdata\", \"CMIP5_dictionary.csv\", package = \"dsclim\"),   method = \"GLM\",   family_link = stats::gaussian(link = \"identity\"),   local.predictors = NULL,   global.vars = NULL,   spatial.predictors = NULL,   extended.predictors = NULL,   combined.only = TRUE,   globalAttributes = NULL )"},{"path":"https://dnietolugilde.com/dsclim/reference/downscaleCMIP5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downscale CMIP5 grid data — downscaleCMIP5","text":"rcp character string indicating Historical Representative Concentration Pathway (RCP) going downscaled. Possible values c(\"historical\", \"rcp2.6\", \"rcp4.5\", \"rcp6.0\", \"rcp8.5\"). mod character string indicating General Circulation Model going downscaled. Possible values c(\"CESM1-CAM5\", \"CSIRO-Mk3-6-0\", \"IPSL-CM5A-MR\"). indir character string indicating directory path look CMIP5 data. directory folder name RCP going loaded. RCP folder turn folder name General Circulation Model goint loaded. uerra climate4R grid object used predictand dowscaling process, usually historical high resolution dataset. object created loadUerra) loadGridData) functions. outdir character string indicating directory path save downscaled datasets. vars character vector indicating CMIP5 variables used predictors. NULL (default value) function use  available variables: c(\"tas, \"tasmax\", \"tasmin\", \"hurs\", \"ps\", \"pr\", \"clt\", \"sfcWind\"), represent mean surface temperature (tas), maximum surface temperature (tasmax), minimum surface temperature (tasmin), relative humidity (hurs), surface pressure (ps), precipitation (pr), total cloudiness (clt), surface wind speed (sfcWind). names CMIP5 variables standardized format (match datasets, e.g. TraCE21ka UERRA datasets). cmip5_vars character vector indicating variables downloaded. NULL (default value) function downscaled available variables c(\"tas, \"tasmax\", \"tasmin\", \"hurs\", \"ps\", \"pr\", \"cld\", \"wss\"), represent mean surface temperature (tas), maximum surface temperature (tasmax), minimum surface temperature (tasmin), relative humidity (hurs), surface pressure (ps), precipitation (pr), total cloudiness (cld), surface wind speed (wss). names CMIP5 variables original format (coded original CMIP5 datasets). lon_lim numeric vector (length = 2) longitudinal extent going dowscaled lat_lim numeric vector (length = 2) latitudinal extent going dowscaled. years numeric vector sequence years going downscaled. default, downscaled whole future period CMIP5 dataset (1991-2100). dictionary data dictionary (loadGridData) going used load data CMIP5 data. default uses internal dictionary standardize CMIP5, TraCE21ka, UERRA data format. method character string indicating downscaling method used. details can read downscaleTrain family_link character string indicating family link used method = \"GLM\". local.predictors Default NULL, used. Otherwise, named list arguments form argument = value, following arguments: vars: names variables x used local predictors fun: Optional. Aggregation function selected local neighbours.   aggregation function specified list, indicating name aggregation function    first place (character), optional arguments passed aggregation function.    instance, compute average skipping missing values: fun = list(FUN= \"mean\", na.rm = TRUE).    Default NULL, meaning aggregation performed. n: Integer. Number nearest neighbours use. single value introduced,   one variable vars, value used variables. Otherwise, vector   length vars indicate different number nearest neighbours different variables. global.vars optional character vector short names variables input x  multigrid retained global predictors (use getVarNames helper sure variable names). argument just produces call subsetGrid, included better flexibility downscaling experiments (predictor screening...). instance, allows use  specific variables contained x local predictors remaining ones, specified subset.vars, either raw global predictors construct combined PC. spatial.predictors Default NULL, used. Otherwise, named list arguments form argument = value, arguments passed prinComp perform Principal Component Analysis predictors grid (x). See Details principal component analysis predictors. extended.predictors parameter related extreme learning machine reservoir computing framework input data randomly projected new space size n. Default NULL, used. Otherwise, named list arguments form argument = value, following arguments: n: numeric value. Indicates size random nonlinear dimension input data projected. module: numeric value (Optional). Indicates size mask's module. Belongs specific type ELM called RF-ELM. combined.Optional, used spatial.predictors parameters passed. combined PC used global predictor? Default TRUE. Otherwise, combined PC constructed .combine argument  prinComp append PCs remaining variables within grid. globalAttributes Optional. list global attributes included NetCDF file. format varAttributes.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/downscaleCMIP5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downscale CMIP5 grid data — downscaleCMIP5","text":"function return string \"Done\" completed successfully. However, real output function output directory downscaled data folder structure original dataset (Output/CMIP5/RCP/GCM/var). default, data saved yearly (one file year) two different formats: netCDF (nc) raw text-tab-separated format (columns: x, y, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12; numbered columns represent 10 months year).","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/downscaleCMIP5.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downscale CMIP5 grid data — downscaleCMIP5","text":"","code":"if (FALSE) {  uerra <- dsclim::loadUerra(   \"Data/UERRA/UERRA-HARMONIE/2m_temperature/latlon/1961-90_2m_temperature.nc\",   \"tas\" )  dsclim::downscaleCMIP5(\"rcp6.0\",   \"CESM1-CAM5\",   \"Data/CMIP5/\",   uerra,   \"Output/CMIP5/\",   lon_lim = c(-11, 12),   lat_lim = c(28, 44),   years = 1991:2100,   method = \"GLM\",   family_link = \"gaussian\" ) }"},{"path":"https://dnietolugilde.com/dsclim/reference/downscaleTrace.html","id":null,"dir":"Reference","previous_headings":"","what":"Downscale TraCE21ka data — downscaleTrace","title":"Downscale TraCE21ka data — downscaleTrace","text":"Downscale TraCE21ka data","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/downscaleTrace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downscale TraCE21ka data — downscaleTrace","text":"","code":"downscaleTrace(   files_n,   indir,   outdir,   mod_data,   model,   model_bin = NULL,   vars = NULL,   lon_lim = c(-25, 25),   lat_lim = c(25, 50),   selection_vars = NULL,   globalAttributes = NULL )"},{"path":"https://dnietolugilde.com/dsclim/reference/downscaleTrace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downscale TraCE21ka data — downscaleTrace","text":"files_n Integer indicating number desired file. Default 36, file data incorporating recent (historical) period. indir Character string relative path TraCE21ka data folder outdir Character string indicating output directory save downscaled data. mod_data List object climate4R format used calibrate model going used downscale TraCE21ka data. model Model object climate4R framework used download TraCE21ka data. See downscaleR::downscaleTrain model_bin Optional model object climate4R framework used binary projection prior quantitative projection. See downscaleR::downscaleTrain. vars String vector name vars include output. Default null, return tas, tasmin, tasmax, pr, ps, hurs, cld, u, v. lon_lim Numeric vector length 2 longitudinal limits area interest loaded. lat_lim Numeric vector length 2 latitudinal limits area interest loaded. selection_vars Character vector indicating name variables going kept output. useful computing wind speed (wss) two wind components interest want excluded output. globalAttributes Optional. list global attributes included NetCDF file. format varAttributes.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/downscaleTrace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downscale TraCE21ka data — downscaleTrace","text":"Character string \"Done\" completed sucessfully. However, real output function downscaled data saved output directory.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/downscaleTrace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downscale TraCE21ka data — downscaleTrace","text":"","code":"if (FALSE) { vars <- c(   \"tas\", \"tasmin\", \"tasmax\", \"hurs@992.5561\", \"ps\",   \"pr\", \"cld\", \"wss\" )  spatial.pars <- list(   which.combine = vars,   v.exp = .95,   rot = FALSE )  uerra <- loadUerra(   \"../../Data/UERRA/UERRA-HARMONIE/2m_temperature/latlon/1961-90_2m_temperature.nc\",   \"tas\" )  trace.file.names <- traceFileNames(\"../../Data/TraCE21ka/\") hist.trace <- loadTrace(trace.file.names, vars, years = 1961:1990)  data <- downscaleR::prepareData(hist.trace,   uerra,   spatial.predictors = spatial.pars )  model <- downscaleR::downscaleTrain(data,   method = \"GLM\",   family = gaussian(link = \"identity\") )  downscaleTrace(4,   \"../Data/TraCE21ka/\",   \"output/TraCE21ka/\",   mod_data = data,   model = model ) }"},{"path":"https://dnietolugilde.com/dsclim/reference/getVerticalLevelPars.html","id":null,"dir":"Reference","previous_headings":"","what":"Definition of vertical dimension slices — getVerticalLevelPars","title":"Definition of vertical dimension slices — getVerticalLevelPars","text":"Returns selected level value () suitable java structure. subroutine loadGridDataset, whose output passed makeSubset.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/getVerticalLevelPars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Definition of vertical dimension slices — getVerticalLevelPars","text":"","code":"getVerticalLevelPars(grid, level)"},{"path":"https://dnietolugilde.com/dsclim/reference/getVerticalLevelPars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Definition of vertical dimension slices — getVerticalLevelPars","text":"grid grid object returned loadGridData. level Vertical level. Passed loadGridDataset, obtained via findVerticalLevel","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/getVerticalLevelPars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Definition of vertical dimension slices — getVerticalLevelPars","text":"list level value either java Range java null reference defining index vertical axis (null vertical levels exist)","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/getVerticalLevelPars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Definition of vertical dimension slices — getVerticalLevelPars","text":"function opens grid checks possible level values.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/getVerticalLevelPars.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Definition of vertical dimension slices — getVerticalLevelPars","text":"J. Bedia","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/grid2spatialdf.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert climate4R grid object as spatial data frame. — grid2spatialdf","title":"Convert climate4R grid object as spatial data frame. — grid2spatialdf","text":"Convert climate4R grid object spatial data frame.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/grid2spatialdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert climate4R grid object as spatial data frame. — grid2spatialdf","text":"","code":"grid2spatialdf(grid)"},{"path":"https://dnietolugilde.com/dsclim/reference/grid2spatialdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert climate4R grid object as spatial data frame. — grid2spatialdf","text":"grid climate4R grid object (see loadeR::loadGridData(), loadUerra(), loadTrace(), loadCMIP5())","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/grid2spatialdf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert climate4R grid object as spatial data frame. — grid2spatialdf","text":"dataframe format spatial data.frame: two columns X Y coordinates, additional twelve columns value variable month year.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/grid2spatialdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert climate4R grid object as spatial data frame. — grid2spatialdf","text":"","code":"if (FALSE) { uerra <- dsclim::loadUerra(   \"Data/UERRA/UERRA-HARMONIE/2m_temperature/latlon/1961-90_2m_temperature.nc\",   \"tas\" )  grid2spatialdf(uerra) }"},{"path":"https://dnietolugilde.com/dsclim/reference/loadCMIP5.html","id":null,"dir":"Reference","previous_headings":"","what":"Load CMIP5 data into climate4R grid format — loadCMIP5","title":"Load CMIP5 data into climate4R grid format — loadCMIP5","text":"Load CMIP5 data climate4R grid format","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/loadCMIP5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load CMIP5 data into climate4R grid format — loadCMIP5","text":"","code":"loadCMIP5(   indir,   rcp,   mod,   vars = NULL,   cmip5_vars = NULL,   lon_lim = c(-11, 12),   lat_lim = c(28, 44),   years = 1991:2100,   dictionary = system.file(\"extdata\", \"CMIP5_dictionary.csv\", package = \"dsclim\") )"},{"path":"https://dnietolugilde.com/dsclim/reference/loadCMIP5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load CMIP5 data into climate4R grid format — loadCMIP5","text":"indir character string directory path CMIP5 data. directory folder name RCP going loaded. RCP folder turn folder name General Circulation Model goint loaded. rcp character vector name RCP going loaded. Possible values c(\"historical\", \"rcp2.6\", \"rcp4.5\", \"rcp6.0\", \"rcp8.5\") mod character vector name GCM going loaded. Possible values c(\"CESM1-CAM5\", \"CSIRO-Mk3-6-0\", \"IPSL-CM5A-MR\"). vars character vector names CMIP5 variables standardized format (match datasets, e.g. TraCE21ka UERRA datasets). cmip5_vars character vector names CMIP5 variables original format (coded original CMIP5 datasets). lon_lim numeric vector (length = 2) longitudinal extent going loaded. lat_lim numeric vector (length = 2) latitudinal extent going loaded. years numeric vector sequence years going loaded. dictionary data dictionary (loadGridData) going used load data. default uses internal dictionary standardize CMIP5, TraCE21ka, UERRA data format.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/loadCMIP5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load CMIP5 data into climate4R grid format — loadCMIP5","text":"list object structure suitable climate4R suite. specifically data returned loadGridData function.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/loadCMIP5.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load CMIP5 data into climate4R grid format — loadCMIP5","text":"","code":"if (FALSE) { dsclim::loadCMIP5(\"../../Data/CMIP5/\",   \"rcp2.6\",   \"CESM1-CAM5\",   lon_lim = c(-11, 12),   lat_lim = c(28, 44),   years = 2006:2100 ) }"},{"path":"https://dnietolugilde.com/dsclim/reference/loadTrace.html","id":null,"dir":"Reference","previous_headings":"","what":"Load TraCE21ka data — loadTrace","title":"Load TraCE21ka data — loadTrace","text":"loadTrace loads TraCE21ka multiple time periods variables. loadHistoricalTraceGrid loads historical TraCE21ka data file single variable. loadTraceGrid  Load non-historical TraCE21ka data single variable.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/loadTrace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load TraCE21ka data — loadTrace","text":"","code":"loadTrace(   files,   vars = NULL,   lon_lim = c(-25, 25),   lat_lim = c(25, 50),   years = NULL,   compute_wss = TRUE,   selection_vars = c(\"tas\", \"tasmax\", \"tasmin\", \"hurs@992.5561\", \"ps\", \"pr\", \"cld\",     \"wss\"),   dictionary = system.file(\"extdata\", \"TraCE21ka_dictionary.csv\", package = \"dsclim\") )  loadHistoricalTraceGrid(   file,   var = NULL,   lon_lim = c(-25, 25),   lat_lim = c(25, 50),   years = NULL,   dictionary = system.file(\"extdata\", \"TraCE21ka_dictionary.csv\", package = \"dsclim\") )  loadTraceGrid(   file,   var,   lon_lim = c(-25, 25),   lat_lim = c(25, 50),   dictionary = system.file(\"extdata\", \"TraCE21ka_dictionary.csv\", package = \"dsclim\") )"},{"path":"https://dnietolugilde.com/dsclim/reference/loadTrace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load TraCE21ka data — loadTrace","text":"files Character vector indicating TraCE21ka files loaded. vars Character vector indicating variables loaded. lon_lim Numeric vector length 2 longitudinal limits area interest loaded. lat_lim Numeric vector length 2 latitudinal limits area interest loaded. years Numeric vector indicating years interest loaded. relevant loading historical period applied loading files older periods. compute_wss Logical value indicating whether compute wind speed (wss) two wind components (.e. u v) include output. selection_vars Character vector indicating name variables going kept output. useful computing wind speed (wss) two wind components interest want excluded output. dictionary Character string indicating dictionary file standardize climate variables, following standard climate4R framework (https://github.com/SantanderMetGroup/loadeR/wiki/Harmonization). file Character string name file (including relative path working directory). var Character string indicating name variable loaded 'file'. standard name defined 'dictionary' argument.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/loadTrace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load TraCE21ka data — loadTrace","text":"List object structure climate4R grids data TraCE21ka data.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/loadTrace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load TraCE21ka data — loadTrace","text":"loadHistoricalTraceGrid function needed dates files comply standard dates format (negative dates) assumed internal functions loadeR::loadGridData function. Hence, extract information manually replicate structure climate4R grid format.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/loadTrace.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Load TraCE21ka data — loadTrace","text":"https://github.com/SantanderMetGroup/loadeR/wiki/Harmonization","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/loadTrace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load TraCE21ka data — loadTrace","text":"","code":"if (FALSE) { LGM.files <- traceFileNames(   \"Data/TraCE21ka/\",   1 ) data <- loadTrace(   LGM.files,   c(     \"tas\", \"tasmax\", \"tasmin\", \"hurs@992.5561\",     \"ps\", \"pr\", \"cld\", \"u@992.5561\", \"v@992.5561\"   ),   compute_wss = TRUE,   selection_vars = c(     \"tas\", \"tasmax\", \"tasmin\",     \"hurs@992.5561\", \"ps\", \"pr\",     \"cld\", \"wss\"   ) )  tas <- loadHistoricalTraceGrid(   \"Data/TraCE21ka/TS/trace.36.400BP-1990CE.cam2.h0.TS.2160101-2204012.nc\",   \"tas\" )   tas <- loadTraceGrid(   \"Data/TraCE21ka/TS/trace.01.22000-20001BP.cam2.h0.TS.0000101-0200012.nc\",   \"tas\",   lon_lim = NULL,   lat_lim = NULL ) }"},{"path":"https://dnietolugilde.com/dsclim/reference/loadUerra.html","id":null,"dir":"Reference","previous_headings":"","what":"Load UERRA data into climate4R grid format — loadUerra","title":"Load UERRA data into climate4R grid format — loadUerra","text":"Load UERRA data climate4R grid format","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/loadUerra.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load UERRA data into climate4R grid format — loadUerra","text":"","code":"loadUerra(   file,   var,   lon_lim = c(-11, 12),   lat_lim = c(28, 44),   dictionary = system.file(\"extdata\", \"UERRA_dictionary.csv\", package = \"dsclim\"),   aggr_times = NULL,   aggr_fun = mean )"},{"path":"https://dnietolugilde.com/dsclim/reference/loadUerra.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load UERRA data into climate4R grid format — loadUerra","text":"file string file name UERRA data loaded. var string variable name file loaded. lon_lim optional vector two values specifying longitudinal limits (min max) loaded. lat_lim optional vector two values specifying latitudinal limits (min max) loaded. dictionary optional string filename dictionary UERRA data. default loads internal dictionary package. aggr_times optional numeric specifying number cells aggregated. aggr_fun optional function specifying function used aggregation aggr.times specified.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/loadUerra.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load UERRA data into climate4R grid format — loadUerra","text":"climate4R grid data (see loadeR::loadGridData() )","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/loadUerra.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load UERRA data into climate4R grid format — loadUerra","text":"","code":"if (FALSE) { file <- \"Data/UERRA/UERRA-HARMONIE/2m_temperature/latlon/1961-90_2m_temperature.nc\" var <- \"tas\" uerra <- loadUerra(uerra.file, local.var) }"},{"path":"https://dnietolugilde.com/dsclim/reference/modifyDates.html","id":null,"dir":"Reference","previous_headings":"","what":"Modify dates in a climate4R object — modifyDates","title":"Modify dates in a climate4R object — modifyDates","text":"Modify dates climate4R object","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/modifyDates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modify dates in a climate4R object — modifyDates","text":"","code":"modifyDates(x, start_date = \"1961-01-01\", end_date = \"1990-12-31\")"},{"path":"https://dnietolugilde.com/dsclim/reference/modifyDates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modify dates in a climate4R object — modifyDates","text":"x climate4R object loaded loadUerra(), loadCMIP5(), loadTrace(), loadeR::loadGridData() functions. start_date character string new starting date format \"yyyy-mm-dd\". end_date character string new ending date format \"yyyy-mm-dd\".","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/modifyDates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modify dates in a climate4R object — modifyDates","text":"function returns climate4R object modified dates according new start end dates.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/modifyDates.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modify dates in a climate4R object — modifyDates","text":"dsclim package designed work downscale monthly meteorological data, function automatically create vector monthly dates new start new end dates. new vector dates length dates x object. Otherwise, error.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/modifyDates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modify dates in a climate4R object — modifyDates","text":"","code":"if (FALSE) { uerra <- dsclim::loadUerra(   \"Data/UERRA/UERRA-HARMONIE/2m_temperature/latlon/1961-90_2m_temperature.nc\",   \"tas\" )  modifyDates(uerra, \"1901-01-01\", \"1930-12-31\") }"},{"path":"https://dnietolugilde.com/dsclim/reference/traceFileNames.html","id":null,"dir":"Reference","previous_headings":"","what":"Return names (including path) of TraCE21ka data files — traceFileNames","title":"Return names (including path) of TraCE21ka data files — traceFileNames","text":"Return names (including path) TraCE21ka data files","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/traceFileNames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return names (including path) of TraCE21ka data files — traceFileNames","text":"","code":"traceFileNames(indir, files_n = 36, vars = NULL)"},{"path":"https://dnietolugilde.com/dsclim/reference/traceFileNames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return names (including path) of TraCE21ka data files — traceFileNames","text":"indir Character string relative path TraCE21ka data folder files_n Integer indicating number desired file. Default 36, file data incorporating recent (historical) period. vars String vector name vars include output. Default null, return tas, tasmin, tasmax, pr, ps, hurs, cld, u, v.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/traceFileNames.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return names (including path) of TraCE21ka data files — traceFileNames","text":"function return string vector filenames variables desired file number TraCE21ka dataset.","code":""},{"path":"https://dnietolugilde.com/dsclim/reference/traceFileNames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return names (including path) of TraCE21ka data files — traceFileNames","text":"","code":"if (FALSE) { historical.files <- traceFileNames(\"Data/TraCE21ka/\", 36) LGM.files <- traceFileNames(\"Data/TraCE21ka/\", 1) }"},{"path":"https://dnietolugilde.com/dsclim/news/index.html","id":"dsclim-0009000","dir":"Changelog","previous_headings":"","what":"dsclim 0.0.0.9000","title":"dsclim 0.0.0.9000","text":"Added NEWS.md file track changes package.","code":""}]
